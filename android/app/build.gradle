import java.util.Properties

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { localProperties.load(it) }
}

def flutterRoot = localProperties.getProperty('flutter.sdk') ?: System.getenv('FLUTTER_SDK')
if (flutterRoot == null) {
    throw new GradleException('Flutter SDK not found. Define location with flutter.sdk in the local.properties file or with the FLUTTER_SDK environment variable.')
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply from: "${flutterRoot}/packages/flutter_tools/gradle/flutter.gradle"

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

android {
    namespace "com.example.crystal_upvc"
    compileSdk 34

    if (flutter.hasProperty('ndkVersion')) {
        ndkVersion = flutter.ndkVersion
    }

    defaultConfig {
        applicationId "com.example.crystal_upvc"
        minSdk 21
        targetSdk 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    packaging {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
        }
    }

    applicationVariants.all { variant ->
        variant.assembleProvider?.get()?.doLast {
            def packageTask = variant.packageApplicationProvider?.get()
            File outDir = packageTask?.outputDirectory?.get()?.asFile
            if (outDir == null || !outDir.exists()) {
                outDir = variant.outputs.first().outputFile?.parentFile
            }
            if (outDir != null && outDir.exists()) {
                def apk = outDir.listFiles()?.find { it.name.endsWith('.apk') }
                if (apk != null) {
                    def flutterOut = new File("${rootProject.projectDir}/../build/app/outputs/flutter-apk")
                    flutterOut.mkdirs()
                    def targetFile = new File(flutterOut, "app-${variant.name}.apk")
                    targetFile.bytes = apk.bytes
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
